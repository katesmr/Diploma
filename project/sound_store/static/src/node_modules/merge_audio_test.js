var toWav = require('audiobuffer-to-wav');

module.exports = function(){
    var s1 = new Tone.Synth({"oscillator": {"type": "square", "frequency": 800},
                             "envelope": {"sustain": 0.5, "release": 0.9, "decay": 0.1, "attack": 0.05}}).toMaster();
    var s2 = new Tone.Synth({"oscillator": {"type": "sine", "frequency": 400, "volume": 20}}).toMaster();
    s1.triggerAttack("C4");
    s1.triggerRelease("8n");
    s2.triggerAttack("C4");
    s2.triggerRelease("8n");

    console.log(s1.context);
    console.log(s2.context);

    function getBuffer(context){
        var context_constants = context._constants;
        var audiobuffer_source_node = context_constants[1];
        var buffer = audiobuffer_source_node.buffer;
        console.log(buffer);
        return buffer;
    }

    function concatenateAudioBuffers(context, buffer1, buffer2) {
        if (!buffer1 || !buffer2) {
            console.log("no buffers!");
            return null;
        }
        if (buffer1.numberOfChannels != buffer2.numberOfChannels) {
            console.log("number of channels is not the same!");
            return null;
        }
        if (buffer1.sampleRate != buffer2.sampleRate) {
            console.log("sample rates don't match!");
            return null;
        }
        var tmp = context.createBuffer(buffer1.numberOfChannels, buffer1.length + buffer2.length, buffer1.sampleRate);
        for (var i=0; i<tmp.numberOfChannels; ++i) {
            var data = tmp.getChannelData(i);
            data.set(buffer1.getChannelData(i));
            data.set(buffer2.getChannelData(i), buffer1.length);
        }
        return tmp;
    };

    var buf1 = getBuffer(s1.context);
    var buf2 = getBuffer(s2.context);
    var new_audio = concatenateAudioBuffers(s1.context, buf1, buf2);
    console.log(new_audio);

    saveData(new_audio, "test.wav");
};

var saveData = (function(){
    var a = document.createElement("a");
    document.body.appendChild(a);
    a.style = "display: none";
    return function(audiobuffer, fileName){
        console.log(audiobuffer);

        var arrbuff = toWav(audiobuffer, {float32: true})
        console.log(arrbuff);

        var blob = new Blob([arrbuff], {"type": "audio/x-wav"});
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = fileName;
        a.click();
        window.URL.revokeObjectURL(url);
    };
}());
