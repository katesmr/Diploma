var ObservableList = require("./ObservableList");
var inherit = require("../utils/inherit");
var TrackSynthesizer = require("./TrackSynthesizer");
var TrackNoise = require("./TrackNoise");
var commonEventNames = require("../core/commonEventNames");

module.exports = ProjectModel;

/**
 * @param project - object
 * @constructor
 */
function ProjectModel(project) {
    ObservableList.call(this);
    this.name = project.name;
    this.id = project.id;
    this.isDeleted = false;
}

inherit(ProjectModel, ObservableList);

/**
 * @param source = object - {id, data}
 */
ProjectModel.prototype.add = function(source){
    console.log("++++++++");
    console.log(source);
    var track;
    var item = {};
    var instrument;
    var data = source.data;
    console.log(data);
    if(data === undefined){
        //default data
        track = new TrackSynthesizer(source.id, {});
    } else{
        instrument = data.instrument;
        if(instrument === "synth"){
            track = new TrackSynthesizer(source.id, data);
        } else if(instrument === "noise"){
            track = new TrackNoise(source.id, data);
        }
    }
    if(track){
        item.track = track;
        item.isDeleted = false;
        ObservableList.prototype.add.call(this, item);
    }
};

ProjectModel.prototype.remove = function(trackId){
    console.log("-");
    console.log(trackId);
    var index = this.findIndexById(trackId);
    if (index < this.size() && index >= 0) {
        // send signal to view for remove item from list
        this.observer.notify(commonEventNames.E_ITEM_REMOVED, index);
        // but leave item in model for case saving project changes
        var item = this.at(index);
        item.isDeleted = true;
    }
};

ProjectModel.prototype.clear = function(){
    // Run over all items and remove each step-by-step:
    this.observer.notify(commonEventNames.E_EMPTY_TRACK_LIST);
    while (this.size()){
        this.__data.splice(0, 1); // pop first element
    }
};

ProjectModel.prototype.isEmpty = function(){
    return this.name.length && this.id === 0 && this.__data.length;
};

ProjectModel.prototype.getData = function(){
    var i;
    var temp;
    var data = [];
    var result = {};
    result.id = this.id;
    result.name = this.name;
    for(i = 0; i < this.size(); ++i){
        temp = {};
        temp.isDeleted = this.__data[i].isDeleted;
        temp.track = this.__data[i].track.getData();
        data.push(temp);
    }
    result.data = data;
    return result;
};

ProjectModel.prototype.toJson = function(){
    return JSON.stringify(this.getData());
};

ProjectModel.prototype.findIndexById = function(searchingId){
    var i;
    var result = -1;
    var currentTrack;
    var id = parseInt(searchingId);
    for(i = 0; i < this.__data.length; ++i){
        currentTrack = this.__data[i].track;
        if(currentTrack.id === id){
            result = i;
            break;
        }
    }
    return result;
};
