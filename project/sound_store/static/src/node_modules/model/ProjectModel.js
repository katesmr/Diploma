var ObservableList = require("./ObservableList");
var inherit = require("../utils/inherit");
var TrackSynthesizer = require("./TrackSynthesizer");
var TrackNoise = require("./TrackNoise");
var generateUID = require("../core/generateUID");
var commonEventNames = require("../core/commonEventNames");

module.exports = ProjectModel;

/**
 * @param project - object
 * @constructor
 */
function ProjectModel(project){
    ObservableList.call(this);
    this.name = project.name;
    this.id = project.id;
    this.isDeleted = false;
    this.default = {
        "id": null,
        "data": {
            "instrument": "synth",
            "setting": {},
            "play-setting": [],
            "length": 1
        }
    };
}

inherit(ProjectModel, ObservableList);

/**
 * @param source = object -
 */
ProjectModel.prototype.add = function(source){
    var element = source || this.default;
    var id = element.id || -generateUID();
    var data = element.data;
    var track;
    var item = {};
    var instrument = data.instrument;
    if(instrument === "synth"){
        track = new TrackSynthesizer(data);
    } else if(instrument === "noise"){
        track = new TrackNoise(data);
    }
    if (track){
        item.id = id;
        item.track = track;
        item.isDeleted = false;
        ObservableList.prototype.add.call(this, item);
    }
};

ProjectModel.prototype.remove = function(trackId){
    var index = this.findIndexById(trackId);
    var item = this.at(index);
    item.isDeleted = true;
    ObservableList.prototype.remove.call(this, index);
};

ProjectModel.prototype.clear = function(){
    // Run over all items and remove each step-by-step:
    this.observer.notify(commonEventNames.E_EMPTY_TRACK_LIST);
    while (this.size()){
        this.__data.splice(0, 1); // pop first element
    }
};

ProjectModel.prototype.isEmpty = function(){
    return this.name.length && this.id === 0 && this.__data.length;
};
