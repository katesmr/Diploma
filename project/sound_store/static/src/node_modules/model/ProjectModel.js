var ObservableList = require("./ObservableList");
var inherit = require("../utils/inherit");
var TrackSynthesizer = require("./TrackSynthesizer");
var TrackNoise = require("./TrackNoise");
var commonEventNames = require("../core/commonEventNames");

module.exports = ProjectModel;

/**
 * @param project - object
 * @constructor
 */
function ProjectModel(project) {
    ObservableList.call(this);
    this.name = project.name;
    this.id = project.id;
    this.isDeleted = false;
}

inherit(ProjectModel, ObservableList);

/**
 * @param source = object - wait {id, data}
 */
ProjectModel.prototype.add = function(source){
    var track;
    var instrument;
    var data = source.data;
    if(data === undefined){
        //default data
        track = new TrackSynthesizer(source.id, {});
    } else{
        instrument = data.instrument;
        if(instrument === "synth"){
            track = new TrackSynthesizer(source.id, data);
        } else if(instrument === "noise"){
            track = new TrackNoise(source.id, data);
        }
    }
    if(track){
        ObservableList.prototype.add.call(this, track);
    }
    console.log(this);
};

ProjectModel.prototype.remove = function(index){
    var item = this.at(index);
    item.isDeleted = true;
    ObservableList.prototype.remove.call(this, index);
};

ProjectModel.prototype.clear = function(){
    var index = 0;
    while(this.size()){
        this.observer.notify(commonEventNames.E_ITEM_REMOVED, index);
        this.__data.splice(index, 1);
    }
};

ProjectModel.prototype.isEmpty = function(){
    return this.name.length && this.id === 0 && this.__data.length;
};

ProjectModel.prototype.getData = function(){
    var i;
    var data = [];
    var result = {};
    result.id = this.id;
    result.name = this.name;
    for(i = 0; i < this.size(); ++i){
        data.push(this.__data[i].getData());
    }
    result.data = data;
    return result;
};

ProjectModel.prototype.toJson = function(){
    return JSON.stringify(this.getData());
};
