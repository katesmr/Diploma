var BaseTrackModel = require("./BaseTrackModel");
var inherit = require("../utils/inherit");
var KickLeft = require("./KickLeft");
var KickRight = require("./KickRight");
var TrackPlayer = require("./TrackPlayer");
var DrumRecorder = require("./DrumRecorder");
var BigTom = require("./BigTom");
var LeftTom = require("./LeftTom");

module.exports = TrackDrum;

function TrackDrum(id, data){
    BaseTrackModel.call(this, id, data);
    this.drums = data.drums || [];
    this.drumObjects = {};
    this.createDrumObjects();
}

inherit(TrackDrum, BaseTrackModel);

TrackDrum.prototype._generate = function(){};

TrackDrum.prototype.getContext = function(){};

TrackDrum.prototype.getConstants = function(){};

TrackDrum.prototype.getAudioBuffer = function(){};

TrackDrum.prototype.getBlob = function(){};

TrackDrum.prototype.createDrumObject = function(drumName){
    switch(drumName){
        case "kick-left":
            this.drumObjects[drumName] = new KickLeft();
            break;
        case "kick-right":
            this.drumObjects[drumName] = new KickRight();
            break;
        case "big-tom":
            this.drumObjects[drumName] = new BigTom();
            break;
        case "left-tom":
            this.drumObjects[drumName] = new LeftTom();
            break;
        case "":
            this.drumObjects[drumName] = new TrackPlayer();
            break;
    }
};

TrackDrum.prototype.getData = function(){
    var result = {};
    result.id = this.id;
    result.isDeleted = this.isDeleted;
    result.instrument = this.instrument;
    result["drums"] = this.drums;
    result["play-setting"] = this.playSetting;
    result["post-setting"] = this.postSettings.getPostSettings();
    return result;
};

TrackDrum.prototype.createDrumObjects = function(){
    var i;
    for(i = 0; i < this.drums.length; ++i){
        this.createDrumObject(this.drums[i]);
    }
};

TrackDrum.prototype.addDrum = function(drumObject){
    if(this.drums.indexOf(drumObject.instrument) === -1){
        this.drums.push(drumObject.instrument);
        this.drumObjects[drumObject.instrument] = drumObject;
    }
};

TrackDrum.prototype.play = function(){
    var i, token;
    for(i = 0; i < this.playObjects.length; ++i){
        token = this.playObjects[i];
        console.log(this.drumObjects[token.instrument]);
        token.play(this.drumObjects[token.instrument].trackObject);
    }
};

TrackDrum.prototype.getDrumObjectsData = function(){
    var drum;
    var result = {};
    for(drum in this.drumObjects){
        result[drum] = this.drumObjects[drum].playSetting;
    }
    return result;
};

TrackDrum.prototype.createPlayObjects = function(){
    var i, token;
    for(i = 0; i < this.playSetting.length; ++i){
        token = this.playSetting[i];
        this.playObjects.push(new DrumRecorder(token.instrument, token.note, token.startTime));
    }
};

/**
 * Apply filter for each drum object
 * @param filter
 */
TrackDrum.prototype.applyFilter = function(filter){
    var drum;
    for(drum in this.drumObjects){
        filter.applyToTrack(this.drumObjects[drum].trackObject);
    }
};

/**
 * Remove filter from each drum object
 * @param filter
 */
TrackDrum.prototype.removeFilter = function(filter){
    var drum;
    for(drum in this.drumObjects){
        filter.disconnectFilter(this.drumObjects[drum].trackObject);
    }
};
