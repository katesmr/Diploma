var inherit = require("../utils/inherit");
var TrackManager = require("../utils/TrackManager");
var AudioBufferRecorder = require("./AudioBufferRecorder");
var eventDuration = require("../utils/eventDuration");

module.exports = DrumAudioBufferRecorder;

function DrumAudioBufferRecorder(drumModel){
    AudioBufferRecorder.call(this, drumModel);
    this.drumCount = 0;
    this.drumAudioBuffers = [];
    this.durationList = {};
}

inherit(DrumAudioBufferRecorder, AudioBufferRecorder);

DrumAudioBufferRecorder.prototype.setModel = function(drumModel){
    if(drumModel){
        this.trackModel = drumModel;
        this.drumCount = drumModel.drums.length;
        this.createTracks();
    }
};

DrumAudioBufferRecorder.prototype.createTrack = function(drumTrack){
    /*if(this.track){
        this.track.disconnect(Tone.Master); // disconnect previous track from Master
    }*/
    this.filterObjects.length = 0;
    if(drumTrack.trackObject instanceof Tone.MembraneSynth){
        this.track = new Tone.MembraneSynth(drumTrack.setting).toMaster();
    } else if(drumTrack.trackObject instanceof Tone.Player){
        this.track = new Tone.Player(drumTrack.url).toMaster();
    } else if(drumTrack.trackObject instanceof Tone.MetalSynth){
        this.track = new Tone.MetalSynth(drumTrack.setting).toMaster();
    }
    if(this.track) {
        this.createFilters();
        this.playData = createDrumPlayData(this.trackModel.playObjects, drumTrack.instrument);
        //this.duration = eventDuration.durationByTime(this.playData);
    }
};

DrumAudioBufferRecorder.prototype.createTracks = function(){
    var drum;
    var name;
    for(name in this.trackModel.drumObjects){
        drum = this.trackModel.drumObjects[name];
        this.createTrack(drum);
        // save duration of each track in object: key - instrument name, value - duration
        this.durationList[drum.instrument] = eventDuration.durationByTime(this.playData);
    }
};

DrumAudioBufferRecorder.prototype.play = function(drumTrack, value){
    if(drumTrack.trackObject instanceof Tone.MembraneSynth){
        this.track.triggerAttack(value.playValue, value.time);
    } else if(drumTrack.trackObject instanceof Tone.Player){
        this.track.start(value.time);
    } else if(drumTrack.trackObject instanceof Tone.MetalSynth){
        this.track.triggerAttackRelease(value.playValue, value.time);
    }
};

DrumAudioBufferRecorder.prototype.record = function(callback){
    var i, drumTrack;
    this.drumAudioBuffers.length = 0;
    for(i = 0; i < this.drumCount; ++i){
        // this.trackModel.drums[i] - drum instrument name
        drumTrack = this.trackModel.drumObjects[this.trackModel.drums[i]];
        // convert all drum objects to AudioBuffers
        this._record(drumTrack, callback);
    }
};

DrumAudioBufferRecorder.prototype._record = function(drumTrack, callback){
    var result; // result merged AudioBuffer
    var self = this;
    // durationList[drumTrack.instrument] - duration of corresponded instrument
    Tone.Offline(function(){
        self.createTrack(drumTrack);
        console.log("offline");
        console.log(self.playData);
        console.log(self.durationList[drumTrack.instrument]);
        var part = new Tone.Part(function(time, value){
            // record all play values
            console.log("part");
            self.play(drumTrack, value);
        }, self.playData);
        part.start(0);
        Tone.Transport.start();
    }, this.durationList[drumTrack.instrument]).then(function(buffer){
        self.drumAudioBuffers.push(buffer._buffer); // save new audioBuffer in list
        console.log("then");
        console.log(buffer._buffer);
        console.log(self.drumAudioBuffers);
        if(self.drumAudioBuffers.length === self.drumCount){
            result = TrackManager.mergeTracks(self.drumAudioBuffers);
            console.log("result");
            console.log(result);
            callback(result);
        }
    });
};

function createDrumPlayData(trackPlayData, instrument){
    var events = [];
    var tmp, i, token;
    for(i = 0; i < trackPlayData.length; ++i){
        tmp = {};
        token = trackPlayData[i];
        if(token.instrument === instrument){
            tmp.time = token.startTime / 1000;
            if(token.playValue){
                tmp.playValue = token.playValue;
            }
            events.push(tmp);
        }
    }
    return events;
}
