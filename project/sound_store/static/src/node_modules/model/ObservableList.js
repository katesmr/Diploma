var BaseModel = require("./BaseModel");
var inherit = require("../utils/inherit");
var commonEventNames = require("../core/commonEventNames");

module.exports = ObservableList;

/**
 * Observable list model. Sends notifications about it's state.
 * @constructor
 * @class ObservableList
 */
function ObservableList(){
    BaseModel.call(this, [], null);
}

inherit(ObservableList, BaseModel);

ObservableList.prototype.clear = function(){
    // Run over all items and remove each step-by-step:
    while (this.size()){
        this.remove(0);
    }
};

ObservableList.prototype.update = function(data){
    // Note: someone should ask to .clear() before calling this.. so don't forget!
    var i;
    if (Array.isArray(data)){
        for (i = 0; i < data.length; ++i){
            this.add(data[i]);
        }
    }
};

ObservableList.prototype.size = function(){
    return this.__data.length;
};

ObservableList.prototype.at = function(index){
    return index < this.size() ? this.__data[index] : null;
};

/**
 * Add item to the end of the list.
 * @param {*} item
 */
ObservableList.prototype.add = function(item){
    // push to back and send actual index of the added item:
    this.observer.notify(
        commonEventNames.E_ITEM_ADDED,
    this.__data.push(item) - 1);
};

/**
 * Removes item at index position.
 * @param {Number} index
 */
ObservableList.prototype.remove = function(index){
    if (index < this.size()){
        // fire before removing:
        this.observer.notify(
            commonEventNames.E_ITEM_REMOVED,
            index);

        // now remove:
        this.__data.splice(index, 1);
    }
};
