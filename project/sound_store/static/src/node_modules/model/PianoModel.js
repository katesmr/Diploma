var PianoKeyList = require("./PianoKeyList");

module.exports = PianoModel;

function PianoModel(className, whiteKeyCount, blackKeyCount){
    this.className = className;
    this.blackKeyCount = blackKeyCount || 15;
    this.whiteKeyCount = whiteKeyCount || 21;
}

PianoModel.prototype.keyContent = function(key, note){
    var $result = $("<div class='key-content'>");
    var $note = $("<label class='note'>" + note + "</label>");
    var $key = $("<label class='keyboard " + key + "'>" + key + "</label>");
    $result.append($note);
    $result.append("<br>");
    $result.append($key);
    return $result;
};

PianoModel.prototype.key = function(className, style, key, note, callback) {
    var $key = $("<div class='" + className + "' style='" + style + "'>");
    $key.append(this.keyContent(key, note));
    $key.click(function () {
        this.setColorToKey(key, "grey");
        callback(note);
    });
    return $key;
};

/**
 * Return class name of KEY - .white/black.key
 * @param key
 * @returns
 */
PianoModel.prototype.getClassKeyElement = function(key){
    console.log(".key." + key);
    return $('.' + this.className).find(".key." + key);
};

PianoModel.prototype.setColorToKey = function(key, color){
    var className = this.instrumentModel.getClassKeyElement(key);
    $(className).css("background-color", color);
};

PianoModel.prototype.piano = function(callback){
    var i;
    var j = 0;
    var whiteKeyDistance = -40;
    var keyDistance = 40;
    var blackKeyDistance = 25;
    var blackKey;
    var whiteKey;
    var isSpace = false;
    var isTwoGroup = true;
    var isThreeGroup = false;
    var countTwoGroup = 2;
    var countThreeGroup = 3;
    var twoGroupCounter = 0;
    var threeGroupCounter = 0;
    var $result = $("<div class='" + this.className + "'>");
    var blackKeys = Object.keys(PianoKeyList.blackKeys);
    var whiteKeys = Object.keys(PianoKeyList.whiteKeys);
    var blackKeysCount = blackKeys.length;
    var summaryKeyCount = whiteKeys.length;

    for(i = 0; i < summaryKeyCount; ++i){
        whiteKey = whiteKeys[i];
        whiteKeyDistance += keyDistance;
        //add white key
        $result.append(this.key("white key " + whiteKey, "left: " + whiteKeyDistance + ";",
                                whiteKey, PianoKeyList.whiteKeys[whiteKey].getValue(), callback));
        if(j < blackKeysCount){
            if(isSpace === false){
                blackKey = blackKeys[j];
                if(isTwoGroup === true){
                    // crete group of two keys
                    $result.append(this.key("black key " + blackKey, "left: " + blackKeyDistance + ";",
                        blackKey, PianoKeyList.blackKeys[blackKey].getValue(), callback));
                    twoGroupCounter++;
                    if(twoGroupCounter === countTwoGroup){
                        // switch on three group keys and space between them
                        isTwoGroup = false;
                        isThreeGroup = true;
                        isSpace = true;
                        twoGroupCounter = 0;
                    }
                } else if(isThreeGroup === true){
                    // crete group of three keys
                    $result.append(this.key("black key " + blackKey, "left: " + blackKeyDistance + ";",
                        blackKey, PianoKeyList.blackKeys[blackKey].getValue(), callback));
                    threeGroupCounter++;
                    if(threeGroupCounter === countThreeGroup){
                        // switch on two group keys and space between them
                        isThreeGroup = false;
                        isTwoGroup = true;
                        isSpace = true;
                        threeGroupCounter = 0;
                    }
                }
                blackKeyDistance += keyDistance;
                j++;
            } else{
                // pass key
                isSpace = false;
                blackKeyDistance += keyDistance; // add distance for space between black keys group
            }
        }
    }
    return $result;
};

function switchFlags(flag1, flag2, flag3, counter){
    flag1 = false;
    flag2 = true;
    flag3 = true;
    counter = 0;
}
