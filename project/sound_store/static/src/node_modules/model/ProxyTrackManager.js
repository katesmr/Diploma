// ProxyTrackManager

module.exports = {
    "updateFromTrack": function(listInstance, track){ // SettingList OR FilterList
        var i;
        var name;
        var tokenSetting;
        var list = listInstance.list;
        for(i = 0; i < list.length; ++i){
            tokenSetting = list[i]; // BaseTrackSetting type
            name = tokenSetting.name;
            if(listInstance instanceof SettingList){ // ?????????
                setToSettingList(tokenSetting, track, name);
            } else if(listInstance instanceof FilterList){ // ????????
                setToFilterList(tokenSetting, track, name);
            }
        }
    },
    "setToTrack": function(list, track){

    },
    "set": function(list, track, settingName, value){

    }
};

function setToSettingList(listElement, track, optionName){
    switch(optionName){
        case "frequency":
            listElement.set(track.getFrequency());
            break;
        case "volume":
            listElement.set( track.getVolume());
            break;
        case "type":
            listElement.set(track.getType());
            break;
        case "attack":
            listElement.set(track.getAttack());
            break;
        case "decay":
            listElement.set(track.getDecay());
            break;
        case "sustain":
            listElement.set(track.getSustain());
            break;
        case "release":
            listElement.set(track.getRelease());
            break;
    }
}

function setToFilterList(listElement, track, filterName){

}

function setToTrackSetting(track, settingName, value){
    switch(settingName){
        case "frequency":
            track.setFrequency(value);
            break;
        case "volume":
            track.setVolume(value);
            break;
        case "type":
            track.setType(value);
            break;
        case "attack":
            track.setAttack(value);
            break;
        case "decay":
            track.setDecay(value);
            break;
        case "sustain":
            track.setSustain(value);
            break;
        case "release":
            track.setRelease(value);
            break;
    }
    track.setSetting(); // write to model parameter for saving to server
}
