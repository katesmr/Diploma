// ProxyTrackManager

module.exports = {
    "updateSettingListFromTrack": function(settingList, track){ // SettingList OR FilterList
        updateList(settingList, track, setToSettingList)
    },
    "updateFilterListFromFilter": function(filterList, filter) {
        updateList(filterList, filter, setToFilterList);
    },
    "setSetting": function(list, track, settingName, value){
        setToTrackSetting(track, settingName, value);
        setToSettingList(list, track, settingName);
    },
    "setFilter": function(filterList, filter, filterName, value){
        setOptionToFilterList(filterList, filter, filterName, value);
        console.log(filterList);
        console.log(filter);
    },
    "addFilter": function(filterList, filter, filterName, isEnabled){
        addFilter(filterList, filter, filterName, isEnabled);
        console.log(filterList);
        console.log(filter);
    }
};

/**
 * Set data from BaseTrackModel/PostSettings to corresponding list
 * @param listInstance - TrackSettingsSet - SettingList OR FilterList
 * @param dataObject
 * @param callback
 */
function updateList(listInstance, dataObject, callback){
    var i;
    var name;
    var tokenSetting;
    var list = listInstance.list;
    for(i = 0; i < list.length; ++i) {
        tokenSetting = list[i]; // BaseTrackSetting type
        name = tokenSetting.name;
        callback(tokenSetting, dataObject, name);
    }
}

/**
 * Set all parameters from FilterObject to FilterList
 * @param filterElement - BaseTrackSetting
 * @param options - object
 */
function setFilterOptionsToFilterList(filterElement, options){
    var optionName;
    for(optionName in options){
        filterElement.isEnabled = true; // switch flag for using this filter
        filterElement.options[optionName].set(options[optionName]);
    }
}

/**
 * Set one option in filter options
 * @param filterList - TrackSettingsSet
 * @param filterObject - PostSettings
 * @param optionName
 * @param value
 */
function setOptionToFilterList(filterList, filterObject, optionName, value){
    var i;
    var tokenFilter;
    var list = filterList.list;
    for(i = 0; i < list.length; ++i){
        tokenFilter = list[i];
        if(optionName in tokenFilter.options){
            tokenFilter.options[optionName].set(value);
            filterObject.setValueToFilter(tokenFilter.name, optionName, value);
        }
    }
}

/**
 * Put all settings from FilterList to FilterObject
 * @param filterList - TrackSettingsSet
 * @param filterObject - PostSettings
 * @param filterName
 * @param isEnabled
 */
function addFilter(filterList, filterObject, filterName, isEnabled){
    var i;
    var tokenFilter;
    var list = filterList.list;
    for(i = 0; i < list.length; ++i){
        tokenFilter = list[i];
        if(tokenFilter.name === filterName){
            tokenFilter.isEnabled = isEnabled;
            filterObject.setFilter(tokenFilter);
        }
    }
}

/**
 * Get data from track object and put them to SettingList
 * @param listElement
 * @param trackObject
 * @param optionName
 */
function setToSettingList(listElement, trackObject, optionName){
    switch(optionName){
        case "frequency":
            listElement.set(trackObject.getFrequency());
            break;
        case "volume":
            listElement.set(trackObject.getVolume());
            break;
        case "type":
            listElement.set(trackObject.getType());
            break;
        case "attack":
            listElement.set(trackObject.getAttack());
            break;
        case "decay":
            listElement.set(trackObject.getDecay());
            break;
        case "sustain":
            listElement.set(trackObject.getSustain());
            break;
        case "release":
            listElement.set(trackObject.getRelease());
            break;
    }
}

/**
 * Get data from filter object and put them to FilterList
 * @param listElement
 * @param filterObject
 * @param filterName
 */
function setToFilterList(listElement, filterObject, filterName){
    switch(filterName){
        case "tremolo":
            break;
        case "vibrato":
            break;
        case "crusher":
            break;
        case "phaser":
            break;
        case "freeverb":
            setFilterOptionsToFilterList(listElement, filterObject[filterName]);
            break;
    }
}

function setToTrackSetting(track, settingName, value){
    switch(settingName){
        case "frequency":
            track.setFrequency(value);
            break;
        case "volume":
            track.setVolume(value);
            break;
        case "type":
            track.setType(value);
            break;
        case "attack":
            track.setAttack(value);
            break;
        case "decay":
            track.setDecay(value);
            break;
        case "sustain":
            track.setSustain(value);
            break;
        case "release":
            track.setRelease(value);
            break;
    }
    track.setSetting(); // write to model parameter for saving to server
}
