var SettingsList = require("./SettingsList");
var FiltersList = require("./FiltersList");
var ProxyTrackManager = require("./ProxyTrackManager");
var generateUID = require("../core/generateUID");

module.exports = BaseTrackModel;

// @param {String} name
// @param {Object} source
function BaseTrackModel(id, data){
    this.isDeleted = false;
    this.id = id || -generateUID();
    this.length = data.length || 1;
    this.setting = data.setting || {}; // this
    this.instrument = data.instrument || "synth";
    this.playSetting = data["play-setting"] || [];
    this.filterSetting = data["post-setting"] || {};

    this.trackObject = this._generate(); // this
    //this.filterObject = this.generateFilters();

    //ProxyTrackManager.updateFromTrack(SettingsList, this);
    //ProxyTrackManager.updateFromTrack(FiltersList, this);
}

BaseTrackModel.prototype.createFormData = function(){
    var formData = new FormData();
    formData.append("user_audio", toBlob(this.trackObject), this.name);
    formData.append("postProcessSettings", JSON.stringify(this.postProcessSettings));
    return formData;
};

BaseTrackModel.prototype.getContext = function(){
    return this.trackObject.context._context;
};

BaseTrackModel.prototype.getConstants = function(){
    return this.trackObject.context;
};

BaseTrackModel.prototype.getAudioBuffer = function(){

};

// CALL THIS BEFORE SAVE ON SERVER !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/**
 * Update or create oscillator && envelope data
 */
BaseTrackModel.prototype.setSetting = function(){
    if(this.trackObject){
        if(this.setting.oscillator === undefined){
            this.setting.oscillator = {};
        } else if(this.setting.envelope === undefined){
            this.setting.envelope = {};
        }
        this.setting.oscillator.valume = this.trackObject.volume.value;
        this.setting.oscillator.frequency = this.trackObject.frequency.value;
        this.setting.oscillator.type = this.trackObject.oscillator.type;
        this.setting.envelope.attack = this.trackObject.envelope.attack;
        this.setting.envelope.decay = this.trackObject.envelope.decay;
        this.setting.envelope.sustain = this.trackObject.envelope.sustain;
        this.setting.envelope.release = this.trackObject.envelope.release;
    }
};

BaseTrackModel.prototype.setEnvelope = function(){

};

BaseTrackModel.prototype.setEnvelopeAttack = function(){

};

/**
 * Rewrite play setting data
 * @param playSetting
 */
BaseTrackModel.prototype.setPlaySetting = function(playSetting){ // ??????????
    this.playSetting = playSetting;
};

/**
 * @param {Object} source
 * @type {null}
 * @protected
 * @return {Tone}
 */
BaseTrackModel.prototype._generate = null;

/**
 * @param {Object} options
 * @type {null}
 */
BaseTrackModel.prototype.play = null;

BaseTrackModel.prototype.playCompomponent = null;

BaseTrackModel.prototype.toJson = function(){
    return JSON.stringify(this);
};

BaseTrackModel.prototype.getData = function(){
    var result = {};
    result.isDeleted = this.isDeleted;
    result.id = this.id;
    result.instrument = this.instrument;
    result.length = this.length;
    result.setting = this.setting;
    result["play-setting"] = this.playSetting;
    result["post-setting"] = this.postSetting;
    return result;
};
