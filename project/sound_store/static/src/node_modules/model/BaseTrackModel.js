var PostSettings = require("./PostSettings");
var generateUID = require("../core/generateUID");
var AudioHelper = require("../utils/AudioHelper");

module.exports = BaseTrackModel;

// @param {String} name
// @param {Object} source
function BaseTrackModel(id, data){
    this.isDeleted = false;
    this.id = id || -generateUID();
    this.length = data.length || 1;
    this.setting = data.setting || {}; // this
    this.instrument = data.instrument || "synth";
    this.playSetting = data["play-setting"] || [];
    this.playObjects = [];

    this.trackObject = this._generate();
    this.postSettings = new PostSettings(data["post-setting"]);

    this.createPlayObjects();
}

BaseTrackModel.prototype.createFormData = function(){
    var formData = new FormData();
    formData.append("user_audio", toBlob(this.trackObject), this.name);
    formData.append("postProcessSettings", JSON.stringify(this.postProcessSettings));
    return formData;
};

BaseTrackModel.prototype.getContext = function(){
    return this.trackObject.context._context;
};

BaseTrackModel.prototype.getConstants = function(){
    return this.trackObject.context;
};

BaseTrackModel.prototype.getAudioBuffer = function(){
    return AudioHelper.getAudioContextBuffer(this.getConstants());
};

BaseTrackModel.prototype.getBlob = function(){
    return AudioHelper.AudioContextToBlob(this.getConstants());
};

BaseTrackModel.prototype.getVolume = function(){
    return this.trackObject.volume.value;
};

BaseTrackModel.prototype.getType = function(){
    return this.trackObject.type;
};

/*BaseTrackModel.prototype.getAttack = function(){
    return this.trackObject.envelope.attack;
};

BaseTrackModel.prototype.getDecay = function(){
    return this.trackObject.envelope.decay;
};

BaseTrackModel.prototype.getSustain = function(){
    return this.trackObject.envelope.sustain;
};

BaseTrackModel.prototype.getRelease = function(){
    return this.trackObject.envelope.release;
};*/

/**
 * Return object of track setting in right format for transfer or saving
 * @returns {{}}
 */
BaseTrackModel.prototype.getData = function(){
    var result = {};
    result.id = this.id;
    result.isDeleted = this.isDeleted;
    result.instrument = this.instrument;
    result.length = this.length;
    result.setting = this.setting;
    result["play-setting"] = this.playSetting;
    result["post-setting"] = this.postSettings.getPostSettings();
    return result;
};

BaseTrackModel.prototype.toJson = function(){
    return JSON.stringify(this);
};

BaseTrackModel.prototype.setVolume = function(value){
    this.trackObject.volume.value = value;
};

BaseTrackModel.prototype.setType = function(value){
    this.trackObject.type = value;
};

/*BaseTrackModel.prototype.setAttack = function(value){
    this.trackObject.envelope.attack = value;
};

BaseTrackModel.prototype.setDecay = function(value){
    this.trackObject.envelope.decay = value;
};

BaseTrackModel.prototype.setSustain = function(value){
    this.trackObject.envelope.sustain = value;
};

BaseTrackModel.prototype.setRelease = function(value){
    this.trackObject.envelope.release = value;
};*/

// CALL THIS BEFORE SAVE ON SERVER !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/**
 * Update or create oscillator && envelope data
 */
/*BaseTrackModel.prototype.setSetting = function(){
    if(this.trackObject){
        if(this.setting.oscillator === undefined){
            this.setting.oscillator = {};
        }
        if(this.setting.envelope === undefined){
            this.setting.envelope = {};
        }
        this.setting.oscillator.valume = this.getVolume();
        this.setting.oscillator.frequency = this.getFrequency();
        this.setting.oscillator.type = this.getType();
        this.setting.envelope.attack = this.getAttack();
        this.setting.envelope.decay = this.getDecay();
        this.setting.envelope.sustain = this.getSustain();
        this.setting.envelope.release = this.getRelease();
    }
};*/

/**
 * Set data to play setting list from play setting object
 */
BaseTrackModel.prototype.setPlaySettings = function(){
    var i;
    this.playSetting.length = 0; // clear previous play setting data
    for(i = 0; i < this.playObjects.length; ++i){
        this.playSetting.push(this.playObjects[i].getData());
    }
};

BaseTrackModel.prototype.emptyPlaySetting = function(){
    this.playSetting.length = 0;
    this.playObjects.length = 0;
};

BaseTrackModel.prototype.disconnectFromAudioSource = function(){
    this.trackObject.disconnect(Tone.Master);
};

/**
 * @param {Object} source
 * @type {null}
 * @protected
 * @return {Tone}
 */
BaseTrackModel.prototype._generate = null;

BaseTrackModel.prototype.createPlayObjects = null;

/**
 * @param {Object} options
 * @type {null}
 */
BaseTrackModel.prototype.play = null;

BaseTrackModel.prototype.record = null;

BaseTrackModel.prototype.setSetting = null;

