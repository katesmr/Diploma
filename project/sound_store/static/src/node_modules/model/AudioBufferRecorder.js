var eventDuration = require("../utils/eventDuration");
var TrackManager = require("../utils/TrackManager");

module.exports = AudioBufferRecorder;

function AudioBufferRecorder(trackModel){
    this.track = null;
    this.playData = null;
    this.duration = 0;
    this.trackModel = trackModel;
    this.createTrack();
}

/**
 * Again create track and filters for record them to Offline
 */
AudioBufferRecorder.prototype.createTrack = function(){
    switch(this.trackModel.instrument){
        case "synth":
            this.track = new Tone.Synth(this.trackModel.setting).toMaster();
            /*var name;
            for(name in ["fr"]){
                var f = new Tone.Freeverb().toMaster();
                this.track.disconnect(Tone.Master);
                this.track.connect(f);
            }*/
            this.createFilters();
            this.playData = createSynthPlayData(this.trackModel.playObjects);
            this.duration = eventDuration(this.playData);
            break;
        case "drum":
            this.track = null;
            break;
        case "oscillator":
            this.track = new Tone.Oscillator(this.trackModel.setting).toMaster();
            this.playData = createOscillatorPlayData(this.trackModel.playObjects);
            this.duration = eventDuration.durationByTime(this.playData);
            break;
        case "noise":
            this.track = new Tone.NoiseSynth();
            break;
    }
};

AudioBufferRecorder.prototype.createFilter = function(filterName, filterSetting){
    var filter = null;
    switch(filterName){
        /*case "tremolo":
            filterObjects[filterName] = new Tone.Tremolo(filterSetting);
            break;
        case "vibrato":
            filterObjects[filterName] = new Tone.Vibrato(filterSetting);
            break;
        case "crusher":
            filterObjects[filterName] = new Tone.BitCrusher(filterSetting);
            break;
        case "phaser":
            filterObjects[filterName] = new Tone.Phaser(filterSetting);
            break;*/
        case "freeverb":
            filter = new Tone.Freeverb(filterSetting).toMaster();
            break;
    }
    return filter;
};

AudioBufferRecorder.prototype.createFilters = function(){
    var name, filter;
    var filterObjects = {};
    for(name in this.trackModel.postSettings.postSettings){
        filter = this.createFilter(name, this.trackModel.postSettings.postSettings[name]);
    }
    this.applyAllFiltersToTrack(filter);
};


/**
 * Apply all filters from filterObjects to one track
 */
AudioBufferRecorder.prototype.applyAllFiltersToTrack = function(filter){
    //filter.toMaster();
    this.track.disconnect(Tone.Master);
    this.track.connect(filter);
};

AudioBufferRecorder.prototype.play = function(instrument, value){
    switch(instrument){
        case "synth":
            this.track.triggerAttackRelease(value.note, value.duration, value.time);
            break;
        case "drum":
            break;
        case "oscillator":
            this.track.frequency.value = value.frequency;
            this.track.volume.value = value.volume;
            this.track.start(value.time);
            break;
        case "noise":
            break;
    }
};

AudioBufferRecorder.prototype.record = function(callback){
    var self = this;
    Tone.Offline(function(){
        self.createTrack(self.trackModel.instrument);
        var part = new Tone.Part(function(time, value){
            self.play(self.trackModel.instrument, value);
            console.log(time, self.duration, value);
        }, self.playData);
        part.start(0);
        Tone.Transport.start();
    }, this.duration).then(function(buffer){
        console.log(buffer);
        console.log(buffer._buffer);
        TrackManager.save(buffer._buffer);
    });
};

function createSynthPlayData(trackPlayData){
    var events = [];
    var tmp, i;
    for(i = 0; i < trackPlayData.length; ++i){
        tmp = {};
        tmp.time = trackPlayData[i].triggerAttackTime / 1000;
        tmp.duration = trackPlayData[i].triggerReleaseTime / 1000;
        tmp.note = trackPlayData[i].note;
        events.push(tmp);
    }
    return events;
}

function createOscillatorPlayData(trackPlayData){
    var events = [];
    var tmp, i;
    for(i = 0; i < trackPlayData.length; ++i){
        tmp = {};
        tmp.time = trackPlayData[i].startTime / 1000;
        tmp.frequency = trackPlayData[i].frequency;
        tmp.volume = trackPlayData[i].volume;
        events.push(tmp);
    }
    return events;
}
