var FreeverbFilter = require("./FreeverbFilter");

module.exports = PostSettings;

/**
 * Contain set of FilterModel objects.
 * Wait object with filters from server.
 * Or if track was created from the client set empty object for future settings.
 * @param postSettings - object
 * @constructor
 */
function PostSettings(postSettings){
    this.postSettings = postSettings || {};
    this.filterObjects = {};
    this.fullFilterObjects();
}

/**
 * Create corresponding filter object
 * @param filterName
 * @param filterSetting
 */
PostSettings.prototype.createFilterObjects = function(filterName, filterSetting){
    switch(filterName){
        case "tremolo":
            break;
        case "vibrato":
            break;
        case "crusher":
            break;
        case "phaser":
            break;
        case "freeverd":
            this.filterObjects[filterName] = new FreeverbFilter(filterSetting);
            break;
    }
};

/**
 * Create list of filter objects with settings from server.
 * Call when init PostSettings.
 */
PostSettings.prototype.fullFilterObjects = function(){
    var filterName;
    for(filterName in this.postSettings){
        this.createFilterObjects(filterName, this.postSettings[filterName])
    }
};

/**
 * Return object with applying filters only
 * @returns {{}}
 */
PostSettings.prototype.getPostSettings = function(){
    var filter;
    var filterName;
    var result = {};
    for(filterName in this.filterObjects){
        filter = this.filterObjects[filterName];
        result[filterName] = filter.getOptions();
        /*if(filter.isUsed === true){
            // save only used filters
            result[filterName] = filter.getOptions();
        }*/
    }
    return result;
};

/**
 * Set new filter settings in corresponding filter object and switch isUsed flag
 * @param filterList - TrackSettingsSet - FilterList
 */
PostSettings.prototype.setPostSettings = function(filterList){
    var i;
    var name;
    var tokenSetting;
    var list = filterList.list;
    for(i = 0; i < list.length; ++i){
        tokenSetting = list[i];
        name = tokenSetting.name;
        if(name in this.filterObjects){
            if(tokenSetting.isEnabled === true){
                // update existing filter
                this.filterObjects[name].setOptions(tokenSetting.options);
            } else{
                //delete no using filter in track
                delete this.filterObjects[name];
            }
        } else{
            //create new filter
            if(tokenSetting.isEnabled === true){
                this.createFilterObjects(name, tokenSetting.options); // tokenSetting.options ?????
            }
        }
    }
};
