// NoiseTrack

var BaseTrackModel = require("./BaseTrackModel");
var PianoKeyPlayer = require("./PianoKeyRecorder");
var inherit = require("../utils/inherit");

module.exports = NoiseTrack;

// @param {String} name
// @param {Object} source
function NoiseTrack(id, data){
    BaseTrackModel.call(this, id, data);
}

inherit(NoiseTrack, BaseTrackModel);

NoiseTrack.prototype.getType = function(){
    return this.trackObject.noise.type;
};

NoiseTrack.prototype.getAttack = function(){
    return this.trackObject.envelope.attack;
};

NoiseTrack.prototype.getDecay = function(){
    return this.trackObject.envelope.decay;
};

NoiseTrack.prototype.getSustain = function(){
    return this.trackObject.envelope.sustain;
};

NoiseTrack.prototype.getRelease = function(){
    return this.trackObject.envelope.release;
};

NoiseTrack.prototype.setType = function(value){
    this.trackObject.noise.type = value;
};

NoiseTrack.prototype.setAttack = function(value){
    this.trackObject.envelope.attack = value;
};

NoiseTrack.prototype.setDecay = function(value){
    this.trackObject.envelope.decay = value;
};

NoiseTrack.prototype.setSustain = function(value){
    this.trackObject.envelope.sustain = value;
};

NoiseTrack.prototype.setRelease = function(value){
    this.trackObject.envelope.release = value;
};

NoiseTrack.prototype.setSetting = function(){
    if(this.trackObject){
        if(this.setting.noise === undefined){
            this.setting.noise = {};
        }
        if(this.setting.envelope === undefined){
            this.setting.envelope = {};
        }
        this.setting.volume = this.getVolume();
        this.setting.noise.type = this.getType();
        this.setting.envelope.attack = this.getAttack();
        this.setting.envelope.decay = this.getDecay();
        this.setting.envelope.sustain = this.getSustain();
        this.setting.envelope.release = this.getRelease();
    }
};

NoiseTrack.prototype._generate = function(){
    return new Tone.Synth(this.setting).toMaster(); //{"oscillator": {}, "envelope": {}}
};

NoiseTrack.prototype.play = function(){
    var i;
    for(i = 0; i < this.playObjects.length; ++i){
        this.playObjects[i].play();
    }
};

NoiseTrack.prototype.playKeyNow = function(note){
    this.trackObject.triggerAttack(note);
};

NoiseTrack.prototype.stopKeyNow = function(){
    this.trackObject.triggerRelease();
};

NoiseTrack.prototype.createPlayObjects = function(){
    var i, tokenPlaySetting;
    for(i = 0; i < this.playSetting.length; ++i){
        tokenPlaySetting = this.playSetting[i];
        this.playObjects.push(new PianoKeyPlayer(this.trackObject, tokenPlaySetting.note,
            tokenPlaySetting.triggerAttackTime, tokenPlaySetting.triggerReleaseTime));
    }
};

NoiseTrack.prototype.saveTest = function(callback){
    var DURATION = 5; // seconds
    var self = this;
    Tone.Offline(function(){
        //only nodes created in this callback will be recorded
        var i;
        var r = self.playSetting;
        for(i = 0; i < r.length; ++i){
            self.trackObject.triggerAttackRelease(r[i][0], r[i][1], r[i][2]);
        }
    }, DURATION).then(function(buffer){
        console.log(buffer);
        callback(buffer._buffer);
    });
};
