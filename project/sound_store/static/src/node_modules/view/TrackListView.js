var inherit = require("../utils/inherit");
var BaseWindow = require("./BaseWindow");
var TrackDataView = require("./TrackDataView");
var Factory = require("./Factory");
var commonEventNames = require("../core/commonEventNames");
var windowsTransport = require("./windowsTransport");

var ProjectRecorder = require("../model/ProjectRecorder");

module.exports = TrackListView;

function TrackListView(controller){
    BaseWindow.call(this, controller, "track-list-view");

    this.projectName = $("<h1></h1>");
    this.addTrackButton = Factory.createIconButton("circular ui icon button add-track", "large plus icon", "");
    this.instrumentChoice = Factory.buttonsPopup(["synth", "drum", "oscillator", "noise"],
                                                 setTrackInstrument.bind(this));
    this.trackList = $("<div class='track-list'>");
    this.__onRemoveButtonClicked = onRemoveButtonClicked.bind(this);

    this.selectedItem = null;

    this.isSaveAction = false;

    this.player = new Tone.Player(); // FIX THIS !!!!!!

    this._build();
    this.hide();
}

inherit(TrackListView, BaseWindow);

TrackListView.prototype._build = function(){
    var self = this;
    var container = this.getContainer();

    //this.projectName.text(this.controller.model.name);

    this.controller.observer.subscribe(commonEventNames.E_ITEM_ADDED, function(eventName, index){
        var element = self.controller.model.at(index);
        self.add(element);
    });

    this.controller.observer.subscribe(commonEventNames.E_ITEM_REMOVED, function(eventName, index){
        var element;
        if(self.selectedItem === null){
            // case when clear all item (them don't selected) in table
            element = self.controller.model.at(index);
            self.remove(element.id);
        } else{
            // case when remove one selected item
            self.remove(self.selectedItem.attr("id"));
            self.selectedItem = null;
        }
    });

    windowsTransport.subscribe(commonEventNames.E_EXPORT_PROJECT, function(){
        var r = new ProjectRecorder(self.controller.model);
        r.createRecord(r.saveBuffers.bind(r));
    });

    windowsTransport.subscribe(commonEventNames.E_PLAY_PROJECT, function(eventName, audioPlayer){
        var r = new ProjectRecorder(self.controller.model);  // always create new ProjectRecorder ??
        r.createRecord(audioPlayer.createPlayer.bind(audioPlayer));
    });

    /*this.addTrackButton.on("click", function(event){
        self.controller.add({});
    });*/

    container.append(this.projectName);
    container.append(this.trackList);
    container.append(this.addTrackButton);
    container.append(this.instrumentChoice);

    this.addTrackButton.popup({
        on: "click"
    });
};

TrackListView.prototype.back = function(){
    windowsTransport.notify(commonEventNames.E_SHOW_MODAL, "Do you want to save project settings?");
    this.isSaveAction = true;
};

TrackListView.prototype.confirmed = function(){
    var self = this;
    if(this.isSaveAction === true){
        if(this.controller.model.isEmpty()){
            // Nothing to save, model is just in default state...
            windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "projectList");
        } else{
            this.controller.save(function(result){
                if (result instanceof Error){
                    // Can't save...
                } else{
                    self.controller.model.clear();
                    // Project saved!
                    windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "projectList");
                }
            });
        }
        this.isSaveAction = false;
    } else{
        this.controller.removeById(this.selectedItem.attr("id"));
    }
};

TrackListView.prototype.declined = function(){
    if(this.isSaveAction === true){
        this.controller.model.clear();
        windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "projectList");
        this.isSaveAction = false;
    } else{
        this.selectedItem = null;
    }
};

TrackListView.prototype.add = function(track){
    var self = this;
    var id = track.id;
    var $instrumentContainer = $("<div class='track-" + id + "'>");
    var trackDataView = new TrackDataView(track.instrument, track.length, track.getContext());
    var $deleteTrackButton = Factory.deleteCircleButton(id, this.__onRemoveButtonClicked);
    $instrumentContainer.append(trackDataView.getContainer());
    $instrumentContainer.append($deleteTrackButton);
    trackDataView.getContainer().click(function(){
        var index = self.controller.model.findIndexById(id);
        self.controller.model.setActiveTrack(self.controller.model.at(index));
        windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "trackView");
    });
    $deleteTrackButton.hide();
    $instrumentContainer.mouseenter(function(event){
        $deleteTrackButton.show();
    });
    $instrumentContainer.mouseleave(function(event){
        $deleteTrackButton.hide();
    });
    this.trackList.append($instrumentContainer);
};

TrackListView.prototype.remove = function(id){
    this.trackList.find(".track-" + id).remove();
};

TrackListView.prototype.playBuffer = function(buffer){
    this.player.buffer = buffer;
    this.player.start();
};

function onRemoveButtonClicked($element){
    if (this.selectedItem === null){
        this.selectedItem = $element;
        windowsTransport.notify(commonEventNames.E_SHOW_MODAL, "Do you really want to delete track?");
    }
}

function setTrackInstrument(value){
    var result = {};
    result.data = {};
    result.data.instrument = value;
    this.controller.add(result);
}
