var commonEventNames = require("../core/commonEventNames");
var inherit = require("../utils/inherit");
var BaseWindow = require("./BaseWindow");
var MessageModal = require("./MessageModal");
var Factory = require("./Factory");
var eventListener = require("../model/eventListener");

module.exports = ProjectList;

function ProjectList(controller){
    BaseWindow.call(this, controller, "project-list");

    this.title = $("<h1>Project List</h1>");
    this.addProjectButton = Factory.createIconButton("circular ui icon button", "plus icon", "");
    this.messageModal = new MessageModal("Do you really want to delete project");
    this.table = $("<div class='five column stackable ui grid'>");

    this.selectedItem = null;
    this.onRemoveButtonClicked = onRemoveButtonClicked.bind(this);

    this._build();
    this.hide();
}

inherit(ProjectList, BaseWindow);

ProjectList.prototype._build = function(){
    var self = this;

    this.controller.observer.subscribe(commonEventNames.E_ITEM_ADDED, function(eventName, index){
        var trackListModel = self.controller.model.at(index);
        self.add(trackListModel);
    });

    this.controller.observer.subscribe(commonEventNames.E_ITEM_REMOVED, function(eventName, index){

    });

    this.messageModal.observer.subscribe(commonEventNames.E_CONFIRMED, function(eventName){
        self.controller.remove(self.selectedItem.attr("id"));
        self.remove(self.selectedItem.attr("id"));
        self.selectedItem = null;
    });

    this.messageModal.observer.subscribe(commonEventNames.E_DECLINED, function(eventName){
        self.selectedItem = null;
    });

    this.addProjectButton.on("click", function(event){
        self.controller.add(JSON.stringify({"DEFAULT_KEY": "DEFAULT_VALUE"}));
    });

    this.addComponents();
};


/*ProjectList.prototype.updateProjectListElement = function(eventName, projectListModel){
    var container = this.getContainer();
    // Clear (possibly) old project list:
    container.empty();
    this.projectList = this.createGridData(projectListModel.projectNameList);
    container.append(this.title);
    container.append(this.projectList);
    container.append(this.addProjectButton);
};*/

ProjectList.prototype.add = function(name){
    // full table or
    // add new item with new project
    var $item;
    var $column;
    var projectName;
    var $deleteProjectButton;
    $deleteProjectButton = Factory.deleteCircleButton(name, this.onRemoveButtonClicked);
    //create function for project name ITEM
    $item = $("<a id='" + name + "'>" + name +"</a>");
    $item.on("click", function(event){
        projectName = $(this).attr("id");
        eventListener.notify(eventListener.SHOW_PROJECT, projectName);
        console.log(projectName);
    });
    $column = $("<div class='column '" + name + ">");
    $column.append($item);
    $column.append($deleteProjectButton);
    this.table.append($column);
};

ProjectList.prototype.remove = function(name){
    // remove from table
    $(".column." + name).remove();
};

ProjectList.prototype.addComponents = function(){
    var container = this.getContainer();
    container.append(this.title);
    container.append(this.table);
    container.append(this.addProjectButton);
};

ProjectList.prototype.updateProjectList = function(){
    this.table.empty();
    this.controller.fetchData();
};

function onRemoveButtonClicked($element){
    if (this.selectedItem === null){
        this.selectedItem = $element;
        this.messageModal.show();
    }
}
