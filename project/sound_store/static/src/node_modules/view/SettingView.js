var inherit = require("../utils/inherit");
var TabSegment = require("./TabSegment");
var Factory = require("./Factory");

module.exports = SettingView;

/**
 * Simple view with some data/widgets
 * @param track
 * @constructor
 */
function SettingView(track){
    TabSegment.call(this, "setting-view");

    this.track = null;

    this.table = $("<div class='two column stackable ui grid'>"); // create grid with two columns

    this.waveTypeRadioBox = Factory.radioButtonRow("sixteen wide column wave-type-block",
                                                    ["sine", "square", "triangle", "sawtooth"],
                                                    this.setTypeValue.bind(this));
    this.volumeRangeLabel = $("<div class='column'>volume</div>");
    this.volumeRange = Factory.rangeElement("column volume-range", -50, 50, this.setVolumeValue.bind(this));
    this.frequencyRangeLabel = $("<div class='column'>frequency</div>");
    this.frequencyRange = Factory.rangeElement("column frequency-range", 0, 1000, this.setFrequencyValue.bind(this));
    this.attackRangeLabel = $("<div class='column'>attack</div>");
    this.attackRange = Factory.rangeElement("column attack-range", 0.0, 1.0, this.setAttackValue.bind(this), 0.01);
    this.decayRangeLabel = $("<div class='column'>decay</div>");
    this.decayRange = Factory.rangeElement("column decay-range", 0.0, 1.0, this.setDecayValue.bind(this), 0.01);
    this.sustainRangeLabel = $("<div class='column'>sustain</div>");
    this.sustainRange = Factory.rangeElement("column sustain-range", 0.0, 1.0, this.setSustainValue.bind(this), 0.01);
    this.releaseRangeLabel = $("<div class='column'>release</div>");
    this.releaseRange = Factory.rangeElement("column release-range", 0.0, 1.0, this.setReleaseValue.bind(this), 0.01);

    this.setTrack(track);

    this._build();
    this.show();
}

inherit(SettingView, TabSegment);

SettingView.prototype._build = function(){
    var container = this.getContainer();

    this.table.append(this.waveTypeRadioBox);
    this.table.append(this.volumeRangeLabel);
    this.table.append(this.volumeRange);
    this.table.append(this.frequencyRangeLabel);
    this.table.append(this.frequencyRange);
    this.table.append(this.attackRangeLabel);
    this.table.append(this.attackRange);
    this.table.append(this.decayRangeLabel);
    this.table.append(this.decayRange);
    this.table.append(this.sustainRangeLabel);
    this.table.append(this.sustainRange);
    this.table.append(this.releaseRangeLabel);
    this.table.append(this.releaseRange);

    container.append(this.table);
};

SettingView.prototype.setTrack = function(track){
    var oscillatorData;
    var envelopeData;
    if(track){
        this.track = track;
        console.log(track.trackObject);
        oscillatorData = this.track.trackObject.oscillator;
        envelopeData = this.track.trackObject.envelope;
        // set starting values from model:
        this.waveTypeRadioBox.find('#' + oscillatorData.type).prop("checked", true);
        Factory.setBeginValueToRangeElement(this.volumeRange, this.track.trackObject.volume.value);
        Factory.setBeginValueToRangeElement(this.frequencyRange, this.track.trackObject.frequency.value);
        Factory.setBeginValueToRangeElement(this.attackRange, envelopeData.attack);
        Factory.setBeginValueToRangeElement(this.decayRange, envelopeData.decay);
        Factory.setBeginValueToRangeElement(this.sustainRange, envelopeData.sustain);
        Factory.setBeginValueToRangeElement(this.releaseRange, envelopeData.release);
    }
};

SettingView.prototype.setTypeValue = function(value){
    this.track.trackObject.oscillator.type = value;
};

SettingView.prototype.setVolumeValue = function(value){
    this.track.trackObject.volume.value = value;
};

SettingView.prototype.setFrequencyValue = function(value){
    this.track.trackObject.frequency.value = value;
};

SettingView.prototype.setAttackValue = function(value){
    this.track.trackObject.envelope.attack = value;
};

SettingView.prototype.setDecayValue = function(value){
    this.track.trackObject.envelope.decay = value;
};

SettingView.prototype.setSustainValue = function(value){
    this.track.trackObject.envelope.sustain = value;
};

SettingView.prototype.setReleaseValue = function(value){
    this.track.trackObject.envelope.release = value;
};
