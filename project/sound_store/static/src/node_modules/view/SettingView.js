var inherit = require("../utils/inherit");
var TabSegment = require("./TabSegment");
var BaseOptionNumber = require("../model/BaseOptionNumber");
var BaseOptionList = require("../model/BaseOptionList");
var SettingsList = require("../model/SettingsList");
var ProxyTrackManager = require("../model/ProxyTrackManager");
var Factory = require("./Factory");

module.exports = SettingView;

/**
 * Simple view with some data/widgets
 * @param track
 * @constructor
 */
function SettingView(track){
    TabSegment.call(this, "setting-view");

    this.track = track;
    this.list = SettingsList.list;

    this.table = $("<div class='two column stackable ui grid'>"); // create grid with two columns

    this.waveTypeRadioBox = Factory.radioButtonRow("sixteen wide column wave-type-block",
                                                    ["sine", "square", "triangle", "sawtooth"],
                                                    this.setTypeValue.bind(this));

    this.setTrack(track);

    this._build();
    this.show();
}

inherit(SettingView, TabSegment);

SettingView.prototype._build = function(){
    var container = this.getContainer();


    this.createSettingTools();

    container.append(this.table);
};

SettingView.prototype.setTrack = function(track){
    var oscillatorData;
    var envelopeData;
    if(track){
        this.track = track;
        oscillatorData = this.track.trackObject.oscillator;
        envelopeData = this.track.trackObject.envelope;
        // set starting values from model:
    }
};

SettingView.prototype.createSettingTools = function(){
    var i;
    var token;
    var value;
    var options;
    var $element;
    var $elementName;
    var settingName;
    console.log("+");
    for(i = 0; i < this.list.length; ++i){
        token = this.list[i];
        options = token.options;
        value = options.value;
        settingName = token.name;
        $elementName = $("<div class='column'>" + settingName + "</div>");
        if(value instanceof BaseOptionNumber){
            $element = Factory.rangeElement("column " + settingName + "-range", value.min, value.max,
                                            undefined, value.step, value.value);
        } else if(value instanceof BaseOptionList){
            $element = Factory.dropDownElement("column " + settingName, value.options,
                                               undefined, value.value);
        }
        this.table.append($elementName);
        this.table.append($element);
    }
};

SettingView.prototype.setTypeValue = function(value){
    this.track.trackObject.oscillator.type = value;
};

SettingView.prototype.setVolumeValue = function(value){
    this.track.trackObject.volume.value = value;
};

SettingView.prototype.setFrequencyValue = function(value){
    this.track.trackObject.frequency.value = value;
};

SettingView.prototype.setAttackValue = function(value){
    this.track.trackObject.envelope.attack = value;
};

SettingView.prototype.setDecayValue = function(value){
    this.track.trackObject.envelope.decay = value;
};

SettingView.prototype.setSustainValue = function(value){
    this.track.trackObject.envelope.sustain = value;
};

SettingView.prototype.setReleaseValue = function(value){
    this.track.trackObject.envelope.release = value;
};
