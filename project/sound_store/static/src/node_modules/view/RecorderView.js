var inherit = require("../utils/inherit");
var BaseView = require("./BaseView");
var Piano = require("./Piano");
var Oscillator = require("./Oscillator");
var DrumMachine = require("./DrumMachine");
var Factory = require("./Factory");

module.exports = RecorderView;

function RecorderView(track){
    BaseView.call(this, "instrument-view");
    this.track = track;

    this.instrument = null;
    this.prevInstrument = null;
    this.recordButton = Factory.createButton("record", "record");
    this.cleardButton = Factory.createButton("clear", "clear");

    this.setInstrument();

    this._build();
}

inherit(RecorderView, BaseView);

RecorderView.prototype._build = function(){
    var self = this;
    var container = this.getContainer();

    this.recordButton.on("click", function(){
        self.instrument.recordEvent($(this));
    });

    this.cleardButton.on("click", function(){
        self.instrument.clearEvent();
    });

    container.append(this.recordButton);
    container.append(this.cleardButton);
    container.append(this.instrument);
};

RecorderView.prototype.setTrack = function(track){
    if(track){
        this.track = track;
        this.setInstrument();
    }
};

RecorderView.prototype.setInstrument = function(){
    if(this.track) {
        if(this.prevInstrument){
            console.log("+++++++++++");
            console.log(this.prevInstrument);
            this.prevInstrument.track = null; // reset reference to track of previous instrument view
            this.prevInstrument.isActive = false;
        }
        switch (this.track.instrument) {
            case "synth":
                this.instrument = new Piano(this.track);
                break;
            case "drum":
                this.instrument = new DrumMachine(this.track);
                break;
            case "oscillator":
                this.instrument = new Oscillator(this.track);
                break;
        }
        this.instrument.isActive = true;
        this.prevInstrument = this.instrument;
        this.getContainer().append(this.instrument.getContainer());
    }
};
