var inherit = require("../utils/inherit");
var BaseView = require("./BaseView");
var PianoModel = require("../model/PianoModel");
var Factory = require("./Factory");

module.exports = Piano;

function Piano(track){
    BaseView.call(this, "piano");
    this.__pressedKeys = [];
    this.track = track;
    this.piano = $("<div class='keys'>");
    this.octaveRange = Factory.dropDownElement("octave-range", "octave-range", {"C1-B3": 0, "C4-B6": 1},
                                                this._dropDownEvent.bind(this));
    this.recordButton = Factory.createButton("record", "record");
    this.recordButton = Factory.createButton("clear", "clear");
    this._build();
}

inherit(Piano, BaseView);

Piano.prototype._build = function(){
    var container = this.getContainer();
    this.createKeys();
    container.append(this.piano);
    container.append(this.octaveRange);
};

Piano.prototype._dropDownEvent = function(id, text, dataValue){
    PianoModel.shift(dataValue); // change keys notation
    this.createKeys();
};

Piano.prototype.createKeys = function(){
    var i, tokenNote, style, key;
    var notes = PianoModel.notes;
    var keyDistance = 40;
    var whiteKeyDistance = -40;
    var blackKeyDistance = -15;
    this.piano.empty(); // clear previous piano keys
    for (i = 0; i < notes.length; ++i){
        tokenNote = notes[i];
        key = PianoModel.keyList[i];
        if(tokenNote.isBlack() === true){
            style = "background-color: rgb(32,32,32); width: 30px; height: 120px; z-index: 1; color: #ffffff;";
            this.piano.append(Factory.createKey("key " + key, "left: " + blackKeyDistance + "; " + style, key,
                tokenNote.value, this._keyDownHandler.bind(this), this._keyUpHandler.bind(this)));
        } else{
            whiteKeyDistance += keyDistance;
            blackKeyDistance += keyDistance;
            this.piano.append(Factory.createKey("key " + key, "left: " + whiteKeyDistance + ";", key,
                tokenNote.value, this._keyDownHandler.bind(this), this._keyUpHandler.bind(this)));
        }
        //container.append(Factory.createKey(tokenNote.value, tokenNote.isBlack()));
    }
};

Piano.prototype.keyDown = function(){
    var key;
    var self = this;
    $(document).keydown(function(event){
        key = String.fromCharCode(event.keyCode);
        self._keyDownHandler(key);
    });
};

Piano.prototype.keyUp = function(){
    var key;
    var self = this;
    $(document).keyup(function(event){
        key = String.fromCharCode(event.keyCode);
        self._keyUpHandler(key);
    });
};

Piano.prototype._keyDownHandler = function(key){
    var note = PianoModel.getNoteForKey(key);
    if(note !== null){
        if(this.__pressedKeys.indexOf(key) === -1){
            this.__pressedKeys.push(key);
            Factory.setColorToKey(key, "grey");
            this.track.playKeyNow(note.getValue());
        }
    }
};

Piano.prototype._keyUpHandler = function(key){
    var note = PianoModel.getNoteForKey(key);
    if(note !== null) {
        if (this.__pressedKeys.indexOf(key) >= 0) {
            if (note.isBlack() === true) {
                Factory.setColorToKey(key, "black");
            } else {
                Factory.setColorToKey(key, "");
            }
            this.track.stopKeyNow();
            this.__pressedKeys.splice(this.__pressedKeys.indexOf(key), 1);
        }
    }
};
