var inherit = require("../utils/inherit");
var BaseView = require("./BaseView");
var PianoModel = require("../model/PianoModel");
var Factory = require("./Factory");

module.exports = Piano;

function Piano(){
    BaseView.call(this, "piano");
    this._build();
}

inherit(Piano, BaseView);

Piano.prototype._build = function(){
    var i, tokenNote, style, key;
    var notes = PianoModel.notes;
    var container = this.getContainer();
    var keyDistance = 40;
    var whiteKeyDistance = -40;
    var blackKeyDistance = 25;
    for (i = 0; i < notes.length; ++i){
        tokenNote = notes[i];
        key = PianoModel.keyList()[i];
        if(tokenNote.isBlack() === true){
            style = "background-color: rgb(32,32,32); width: 30px; height: 120px; z-index: 1; color: #ffffff;";
            container.append(Factory.createKey("key " + key, "left: " + blackKeyDistance + "; " + style, key,
                                               tokenNote.value, undefined));
            blackKeyDistance += keyDistance;
        } else{
            whiteKeyDistance += keyDistance;
            container.append(Factory.createKey("key " + key, "left: " + whiteKeyDistance + ";", key,
                                               tokenNote.value, undefined));
        }
        //container.append(Factory.createKey(tokenNote.value, tokenNote.isBlack()));
    }

    /*window.onkeydown = function(e){
        PianoModel.getNoteForKey(e.keyCode);
    };*/
};

Piano.prototype.keyDown = function(){
    $(document).keydown(function(event){
        PianoModel.getNoteForKey(event.keyCode);
        Factory.setColorToKey(String.fromCharCode(event.keyCode), "grey");
    });
};

Piano.prototype.keyUp = function(){
    var note;
    $(document).keyup(function(event){
        note = PianoModel.getNoteForKey(event.keyCode);
        if(note.isBlack() === true){
            Factory.setColorToKey(String.fromCharCode(event.keyCode), "black");
        } else {
            Factory.setColorToKey(String.fromCharCode(event.keyCode), "");
        }
    });
};
