var inherit = require("../utils/inherit");
var BaseView = require("./BaseView");
var PianoModel = require("../model/PianoModel");
var Factory = require("./Factory");

module.exports = Piano;

function Piano(track){
    BaseView.call(this, "piano");
    this.__pressedKeys = [];
    this.track = track;
    this.piano = $("<div class='keys'>");
    //this.notesChosen = Factory.dropDownElement();
    this.recordButton = Factory.createButton("record", "record");
    this.recordButton = Factory.createButton("clear", "clear");
    this._build();
}

inherit(Piano, BaseView);

Piano.prototype._build = function(){
    var container = this.getContainer();
    this.createKeys();
    container.append(this.piano);
};

Piano.prototype.createKeys = function(){
    var i, tokenNote, style, key;
    var notes = PianoModel.notes;
    var keyDistance = 40;
    var whiteKeyDistance = -40;
    var blackKeyDistance = -25;
    for (i = 0; i < notes.length; ++i){
        tokenNote = notes[i];
        key = PianoModel.keyList[i];
        if(tokenNote.isBlack() === true){
            style = "background-color: rgb(32,32,32); width: 30px; height: 120px; z-index: 1; color: #ffffff;";
            this.piano.append(Factory.createKey("key " + key, "left: " + blackKeyDistance + "; " + style, key,
                tokenNote.value, undefined));
        } else{
            whiteKeyDistance += keyDistance;
            blackKeyDistance += keyDistance;
            this.piano.append(Factory.createKey("key " + key, "left: " + whiteKeyDistance + ";", key,
                tokenNote.value, undefined));
        }
        //container.append(Factory.createKey(tokenNote.value, tokenNote.isBlack()));
    }
};

Piano.prototype.keyDown = function(){
    var note, key;
    var self = this;
    $(document).keydown(function(event){
        key = String.fromCharCode(event.keyCode);
        // store incoming keycode inside __pressedKeys array
        note = PianoModel.getNoteForKey(event.keyCode);
        if(note !== null){
            if(self.__pressedKeys.indexOf(key) === -1){
                self.__pressedKeys.push(key);
                Factory.setColorToKey(key, "grey");
                self.track.playKeyNow(note.getValue());
            }
        }
    });
};

Piano.prototype.keyUp = function(){
    var note, key;
    var self = this;
    $(document).keyup(function(event){
        // remove key from __pressedKeys array and stop play it
        note = PianoModel.getNoteForKey(event.keyCode);
        key = String.fromCharCode(event.keyCode);
        if(note !== null){
            if(self.__pressedKeys.indexOf(key) >= 0){
                if(note.isBlack() === true){
                    Factory.setColorToKey(key, "black");
                } else{
                    Factory.setColorToKey(key, "");
                }
                self.track.stopKeyNow();
                self.__pressedKeys.splice(self.__pressedKeys.indexOf(key), 1);
            }
        }
    });
};
