var inherit = require("../utils/inherit");
var DrumRecorder = require("../model/DrumRecorder");
var DrumModel = require("../model/DrumModel");
var BaseInstrument = require("./BaseInstrument");

module.exports = DrumMachine;

function DrumMachine(track){
    BaseInstrument.call(this, track, "drum-machine");

    this.drumGrid = null;

    this._build();
}

inherit(DrumMachine, BaseInstrument);

DrumMachine.prototype._build = function(){
    var self = this;
    var container = this.getContainer();

    this.createDrumGrid(DrumModel.keys);

    container.append(this.drumGrid);
};

DrumMachine.prototype.recordEvent = function(eventName, recordButton){
    if(this.isRecordNow === true){
        // stop record
        recordButton.text("record");
        this.isRecordNow = false;
    } else{
        this.isRecordNow = true;
        this.track.emptyPlaySetting(); // clear previous play data setting
        recordButton.text("stop");
    }
};

DrumMachine.prototype.clearEvent = function(){
    this.track.emptyPlaySetting();
};


DrumMachine.prototype._recordHandler = function(drumObject){
    this.track.addDrum(drumObject.instrument);
    console.log("---------");
    console.log(this.track.playObjects);
    if(this.track.playObjects.length === 0){
        this.startTime = Date.now();
        // this is the first button pressed, so it's time to remember the start time!
        this.track.playObjects.push(new DrumRecorder(drumObject.instrument, drumObject.playValue, 0));
    } else{
        this.track.playObjects.push(new DrumRecorder(drumObject.instrument, drumObject.playValue,
                                                     Date.now()-this.startTime));
    }
};

DrumMachine.prototype._drumKeyDownHandler = function(key){
    var drumObject = null;
    var drumName = DrumModel.getDrumNameForKey(key);
    if(drumName !== null){
        if(this.track){
            drumObject = this.track.allDrumObjects[drumName];
            drumObject.playNow();
            if (this.isRecordNow === true) {
                this._recordHandler(drumObject);
            }
        }
    }
};

DrumMachine.prototype.keyDown = function(){
    var key;
    var self = this;
    $(document).keydown(function(event){
        key = String.fromCharCode(event.keyCode);
        self._drumKeyDownHandler(key);
    });
};

DrumMachine.prototype.createDrumGrid = function(drumList){
    var i;
    var self = this;
    var $item = null;
    var $column = null;
    this.drumGrid = $("<div class='ten column stackable ui grid drum'>");
    for(i = 0; i < drumList.length; ++i){
        $item = $("<div id='" + drumList[i] + "' class='item'>" + drumList[i] + "</div>");
        $item.on("click", function(event){
            self._drumKeyDownHandler($(this).attr("id"));
        });
        $column = $("<div class='column'>");
        $column.append($item);
        this.drumGrid.append($column);
    }
};
