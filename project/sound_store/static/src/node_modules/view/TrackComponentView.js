//TrackComponentView
var inherit = require("../utils/inherit");
var BaseView = require("./BaseView");
var TrackView = require("./TrackView");
var eventListener = require("../model/eventListener");

module.exports = TrackComponentView;

/*
    wait:
    {"synth": TrackObject, "noise": TrackObject, "oscillator": TrackObject}
    or
    {"synth": TrackObject} ....
    TrackObject.context
 */
function TrackComponentView(){
    BaseView.call(this, "track-component-view");

    this.components = [];

    this._build();
    this.hide();
}

inherit(TrackComponentView, BaseView);

TrackComponentView.prototype._build = function(){
    //this.getContainer().empty();
    eventListener.subscribe(eventListener.PROJECT_MODEL_UPDATED, this.createTrackViewList.bind(this));
};

TrackComponentView.prototype.createTrackViewList = function(eventName, project){
    var i;
    var track;
    var trackView;
    for(track in project.trackModelList){
        console.log("tr");
        console.log(track);
        trackView = new TrackView(project.trackModelList[track]);
        this.getContainer().append(trackView.getContainer());
        this.components.push(trackView);
    }
};
