var inherit = require("../utils/inherit");
var MixerRecorder = require("../model/MixerRecorder");
var BaseInstrument = require("./BaseInstrument");

module.exports = Oscillator;

function Oscillator(track){
    BaseInstrument.call(this, track, "oscillator");

    this.draggable = null;
    this.draggie = null;

    this.isMouseClicked = false;

    this.isMousePressed = false;
    this.pressedCoords = [];

    this.coordsMap = $("<div class='coord-map'>");
    this.oscillator = $("<div class='circle-drag draggable'>");
    this._build();
}

inherit(Oscillator, BaseInstrument);

Oscillator.prototype._build = function(){
    var self = this;
    var container = this.getContainer();

    this.draggable = this.oscillator.draggabilly();
    this.draggie = this.draggable.data("draggabilly");

    setPosition(this.draggie, this.track.getFrequency(), this.track.getVolume());

    this.draggable.on("dragMove", function(event){
        self.isMousePressed = false;
        self.dragMoveEvent();
    });

    this.draggable.on("pointerDown", function(event){
        self.isMousePressed = true;
        self.dragPointPressEvent();
    });

    this.draggable.on("dragEnd", function(event){
        self.isMousePressed = false;
        self.dragEndEvent();
    });

    this.draggable.on("pointerUp", function(event){
        self.isMousePressed = false;
        self.dragEndEvent();
    });

    this.coordsMap.append(this.oscillator);
    container.append(this.coordsMap);
};

Oscillator.prototype.recordEvent = function(recordButton){
    if(this.isRecordNow === true){
        // stop record
        recordButton.text("record");
        this.isRecordNow = false;
        console.log(this.track.playObjects);
    } else{
        this.isRecordNow = true;
        this.track.emptyPlaySetting(); // clear previous play data setting
        recordButton.text("stop");
    }
};

Oscillator.prototype.clearEvent = function(){
    this.track.emptyPlaySetting();
};

Oscillator.prototype._dragHandler = function(){
    this.track.setFrequency(this.draggie.position.x);
    this.track.setVolume(this.draggie.position.y);
    this.track.trackObject.start();
    console.log( 'dragMove', this.draggie.position.x, this.draggie.position.y );
    if(this.track.playObjects.length === 0){
        this.startTime = Date.now();
        this.track.playObjects.push(new MixerRecorder(this.draggie.position.x, this.draggie.position.y, 0));
    } else{
        this.track.playObjects.push(new MixerRecorder(this.draggie.position.x,
                                                      this.draggie.position.y, Date.now()-this.startTime));
    }
};

Oscillator.prototype.dragMoveEvent = function(){
    this._dragHandler();
};

Oscillator.prototype.dragPointPressEvent = function(){
    var pressedCoord = {'x': this.draggie.position.x, 'b': this.draggie.position.y};
    if(isContainObject(this.pressedCoords, pressedCoord) === false){
        this._dragHandler();
    }
};

Oscillator.prototype.dragEndEvent = function(){
    this.track.trackObject.stop();
};

function setPosition(draggieObject, x, y) {
    draggieObject.position.x = x;
    draggieObject.position.y = y;
    draggieObject.setLeftTop();
}

function isContainObject(list, object){
    var i;
    var result = false;
    for(i = 0; i < list.length; i++){
        if(list[i] === object){
            result = true;
        }
    }
    return result;
}
