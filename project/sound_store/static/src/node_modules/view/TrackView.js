var inherit = require("../utils/inherit");
var BaseWindow = require("./BaseWindow");
var FilterView = require("./FilterView");
var SettingView = require("./SettingView");
var PianoModel = require("../model/PianoModel");
var commonEventNames = require("../core/commonEventNames");
var windowsTransport = require("./windowsTransport");

var eventHandler = require("../utils/eventHandler");

module.exports = TrackView;

function TrackView(controller){
    BaseWindow.call(this, controller, "track-view");

    this.title = ""; //this.track.instrument; // instrument name

    this.waveform = $("<div class='wave-form'></div>");
    this.tabBlock = $("<div class='ui top attached tabular menu'>");

    this.settingTabSegment = new SettingView(null);
    this.filterTabSegment = new FilterView(null);

    this.settingTitle = $("<a class='item' data-tab='" + this.settingTabSegment.dataTab + "'>setting</a>");
    this.filterTitle = $("<a class='item active' data-tab='" + this.filterTabSegment.dataTab + "'>filter</a>");

    this.pianoModel = new PianoModel("piano");
    this.piano = this.pianoModel.piano(function(obj){
        console.log(obj);
    });

    this._build();
    this.hide();
    this.showTabMenu();
}

inherit(TrackView, BaseWindow);

TrackView.prototype._build = function(){
    var container = this.getContainer();

    //this.settingTabSegment.setActive(); // set Setting tab in active state
    this.filterTabSegment.setActive();

    this.controller.observer.subscribe(commonEventNames.E_SET_TRACK, setTrack.bind(this));

    container.append(this.waveform);
    this.tabBlock.append(this.settingTitle);
    this.tabBlock.append(this.filterTitle);
    container.append(this.tabBlock);
    container.append(this.settingTabSegment.getContainer());
    container.append(this.filterTabSegment.getContainer());

    container.append(this.piano);
};

TrackView.prototype.showTabMenu = function(){
    $(".tabular.menu .item").tab();
};

TrackView.prototype.back = function(){
    this.settingTabSegment.table.empty();
    this.filterTabSegment.table.empty();
    windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "trackList");
    this.filterTabSegment.resetFilters(); // reset previous filter of track
};

TrackView.prototype.bindKeyEvent = function(){
    eventHandler.keyPressEvent(keyDownEvent.bind(this));
    eventHandler.keyUpEvent(keyUpEvent.bind(this));
};

function setTrack(eventName, track){
    this.settingTabSegment.setTrack(track);
    this.filterTabSegment.setFilter(track);
}

function keyDownEvent(pressedKey){
    var className = this.pianoModel.getClassKeyElement(pressedKey);
    console.log(className);
    $(className).css("background-color", "grey");
}

function keyUpEvent(upKey){
    var className = this.pianoModel.getClassKeyElement(upKey);
    $(className).css("background-color", "");
}
