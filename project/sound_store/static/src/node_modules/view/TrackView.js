var inherit = require("../utils/inherit");
var WaveForm = require("./WaveForm");
var BaseWindow = require("./BaseWindow");
var FilterView = require("./FilterView");
var SettingView = require("./SettingView");
var RecorderView = require("./RecorderView");
var commonEventNames = require("../core/commonEventNames");
var windowsTransport = require("./windowsTransport");

var Recorder = require("recorder-js");

module.exports = TrackView;

function TrackView(controller){
    BaseWindow.call(this, controller, "track-view");

    this.title = ""; //this.track.instrument; // instrument name

    this.waveform = new WaveForm();
    this.tabBlock = $("<div class='ui top attached tabular menu'>");

    this.settingTabSegment = new SettingView(null);
    this.filterTabSegment = new FilterView(null);

    this.settingTitle = $("<a class='item' data-tab='" + this.settingTabSegment.dataTab + "'>setting</a>");
    this.filterTitle = $("<a class='item' data-tab='" + this.filterTabSegment.dataTab + "'>filter</a>");

    this.instrumentView = new RecorderView();

    this._build();
    this.hide();
    this.showTabMenu();
}

inherit(TrackView, BaseWindow);

TrackView.prototype._build = function(){
    var container = this.getContainer();

    this.setActiveSettingView();

    this.controller.observer.subscribe(commonEventNames.E_SET_TRACK, setTrack.bind(this));

    container.append(this.waveform.getContainer());
    container.append(this.instrumentView.getContainer());
    this.tabBlock.append(this.settingTitle);
    this.tabBlock.append(this.filterTitle);
    container.append(this.tabBlock);
    container.append(this.settingTabSegment.getContainer());
    container.append(this.filterTabSegment.getContainer());
};

TrackView.prototype.showTabMenu = function(){
    $(document).ready(function(){
        $('.tabular.menu .item').tab({history:false});
    });
};

TrackView.prototype.setActiveSettingView = function(){
    this.settingTabSegment.setActive();
    this.settingTitle.addClass("active");
};

TrackView.prototype.setActiveFilterView = function(){
    this.filterTabSegment.setActive();
    this.filterTitle.addClass("active");
};

TrackView.prototype.back = function(){
    this.settingTabSegment.table.empty();
    this.filterTabSegment.table.empty();
    windowsTransport.notify(commonEventNames.E_ACTIVATE_WINDOW, "trackList");
    this.settingTabSegment.resetToolOptions(); // reset previous setting of track
    this.filterTabSegment.resetToolOptions(); // reset previous filter of track
    // save playing setting
    this.instrumentView.track.setPlaySettings();
    this.instrumentView.instrument.getContainer().empty();
};

TrackView.prototype.bindKeyEvent = function(){
    this.instrumentView.instrument.keyDown();
    this.instrumentView.instrument.keyUp();
};

function setTrack(eventName, track){
    //this.waveform.createWaveFormFromFile(track.getBlob());

    this.settingTabSegment.setTrack(track);
    this.filterTabSegment.setFilter(track);

    this.instrumentView.setTrack(track);

    testSave(track);
}

function testSave(track){
    console.log(createDuration([{"time": 0, "duration": 0.8}, {"time": 0.3, "duration": 0.4},
                                {"time": 0.4, "duration": 0.3}, {"time": 0.6, "duration": 0.2},
                                {"time": 0.65, "duration": 0.3}]));
    var events = [];
    var timeData = [];
    var tmp, temp, i, duration;
    for(i = 0; i < track.playObjects.length; ++i){
        tmp = {};
        temp = {};
        tmp.time = (track.playObjects[i].triggerAttackTime/1000);
        tmp.duration = (track.playObjects[i].triggerReleaseTime/1000);
        temp.time = tmp.time;
        temp.duration = tmp.duration;
        tmp.note = (track.playObjects[i].note);
        events.push(tmp);
        timeData.push(temp);
    }
    console.log(events);
    duration = createDuration(timeData);
    console.log(duration);

    /*Tone.Offline(function(){
        var part = new Tone.Part(function(time, value){
            //the notes given as the second element in the array
            //will be passed in as the second argument
            track.trackObject.triggerAttackRelease(value.note, value.duration, '+' + value.time);
            console.log(value.note, value.time, value.duration);
        }, events);
        part.start(0);
        Tone.Transport.start();
    }, duration).then(function(buffer){
        //do something with the output buffer
        console.log(buffer);
        console.log(buffer._buffer);
        Tone.Transport.stop();

    });*/

    /*Tone.Offline(function(){
        var part = new Tone.Part(function(time, note, dur){
            //the notes given as the second element in the array
            //will be passed in as the second argument
            track.trackObject.triggerAttackRelease(note, dur, time);
            console.log(note, time);
        }, events);
        part.start(0);
        Tone.Transport.start();
    }, 10).then(function(buffer){
        //do something with the output buffer
        console.log(buffer);
        console.log(buffer._buffer);

    });*/
}

function createDuration(data){
    var duration = 0;
    var tmp;
    var obj;
    for(obj in data){
        if(data[obj].time === 0){
            duration = data[obj].duration;
        } else{
            tmp = data[obj].time + data[obj].duration;
            duration = Math.max(duration, tmp);
        }
    }
    return duration;
}
