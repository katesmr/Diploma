var Observer = require("../index");
var expect = require("chai").expect;

describe("Observer", function() {
    describe("new Observer", function () {
        it("checks constructor property", function () {
            var observer = new Observer;
            expect(observer.constructor).to.equal(Observer);
            expect(observer).to.be.an.instanceof(Observer);
        });
    });

    describe("subscribe()", function () {
        it("checks subscribe logic", function () {
            var observer = new Observer;

            var result = observer.subscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            function handler(eventName, data){}
        });

        it("add few handlers", function () {
            var observer = new Observer;

            var result1 = observer.subscribe("SOME EVENT", handler1);
            var result2 = observer.subscribe("SOME EVENT", handler2);
            var result3 = observer.subscribe("SOME EVENT", handler3);

            expect(result1).to.equal(true);
            expect(result2).to.equal(true);
            expect(result3).to.equal(true);

            function handler1(eventName, data){}
            function handler2(eventName, data){}
            function handler3(eventName, data){}
        });

        it("add few handlers to different events", function () {
            var observer = new Observer;

            var result1 = observer.subscribe("SOME EVENT 1", handler1);
            var result2 = observer.subscribe("SOME EVENT 2", handler2);
            var result3 = observer.subscribe("SOME EVENT 3", handler3);

            expect(result1).to.equal(true);
            expect(result2).to.equal(true);
            expect(result3).to.equal(true);

            function handler1(eventName, data){}
            function handler2(eventName, data){}
            function handler3(eventName, data){}
        });

        it("adds one handler to few events", function () {
            var observer = new Observer;

            var result1 = observer.subscribe("SOME EVENT 1", handler);
            var result2 = observer.subscribe("SOME EVENT 2", handler);
            var result3 = observer.subscribe("SOME EVENT 3", handler);

            expect(result1).to.equal(true);
            expect(result2).to.equal(true);
            expect(result3).to.equal(true);

            function handler(eventName, data){}
        });

        it("try to add one handler to same events few times", function () {
            var observer = new Observer;

            var result1 = observer.subscribe("SOME EVENT", handler);
            var result2 = observer.subscribe("SOME EVENT", handler); // already added!

            expect(result1).to.equal(true);
            expect(result2).to.equal(false);

            function handler(eventName, data){}
        });

        it("try to subsribe with non-callable argument", function () {
            var observer = new Observer;

            var result1 = observer.subscribe("SOME EVENT", false);
            var result2 = observer.subscribe("SOME EVENT", null);
            var result3 = observer.subscribe("SOME EVENT", {});

            expect(result1).to.equal(false);
            expect(result2).to.equal(false);
            expect(result3).to.equal(false);
        });
    });

    describe("hasSubscribersForEvent()", function () {
        it("check whether the observer has subscribers for event", function () {
        	var observer = new Observer;

            observer.subscribe("SOME EVENT", handler);

            expect(observer.hasSubscribersForEvent("SOME EVENT")).to.equal(true);

            function handler(eventName, data){}
        });

        it("check whether the observer has subscribers for event", function () {
        	var observer = new Observer;

            observer.subscribe("SOME EVENT", handler);

            expect(observer.hasSubscribersForEvent("SOME WRONG EVENT")).to.equal(false);

            function handler(eventName, data){}
        });
    });

    describe("unsubscribe()", function () {
        it("check unsubscribe logic", function () {
            var observer = new Observer;

            var result = observer.subscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            result = observer.unsubscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            function handler(eventName, data){}
        });

        it("check unsubscribe logic", function () {
            var observer = new Observer;

            var result = observer.subscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            result = observer.unsubscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            function handler(eventName, data){}
        });

        it("check whether the observer still has subscribers after unsubscribe", function () {
            var observer = new Observer;

            var result = observer.subscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            result = observer.unsubscribe("SOME EVENT", handler);

            expect(result).to.equal(true);

            expect(observer.hasSubscribersForEvent("SOME EVENT")).to.equal(false);

            function handler(eventName, data){}
        });

        it("unsubscribe from few events", function () {
            var observer = new Observer;

            observer.subscribe("SOME EVENT 1", handler);
            observer.subscribe("SOME EVENT 2", handler);
            observer.subscribe("SOME EVENT 3", handler);

            var result1 = observer.unsubscribe("SOME EVENT 1", handler);
            var result2 = observer.unsubscribe("SOME EVENT 2", handler);
            var result3 = observer.unsubscribe("SOME EVENT 3", handler);

            expect(result1).to.equal(true);
            expect(result2).to.equal(true);
            expect(result3).to.equal(true);

            function handler(eventName, data){}
        });

        it("try to unsubscribe from unexisting event", function () {
            var observer = new Observer;

            observer.subscribe("SOME EVENT", handler);

            var result = observer.unsubscribe("SOME WRONG EVENT", handler);

            expect(result).to.equal(false);

            function handler(eventName, data){}
        });
    });

    describe("notify()", function () {
        it("check notify logic", function () {
        	var callCount = 0;
        	var messageData = {};
            var observer = new Observer;

            observer.subscribe("SOME EVENT", handler);

            observer.notify("SOME EVENT", messageData);

            expect(callCount).to.equal(1);

            function handler(eventName, data){
            	expect(eventName).to.equal("SOME EVENT");
            	expect(data).to.equal(messageData);
            	++callCount;
            }
        });

        it("check notify logic from few events", function () {
        	var callCount = 0;
        	var messageData = {};
            var observer = new Observer;

            observer.subscribe("SOME EVENT 1", handler);
            observer.subscribe("SOME EVENT 2", handler);
            observer.subscribe("SOME EVENT 3", handler);

            observer.notify("SOME EVENT 1", messageData);
            observer.notify("SOME EVENT 2", messageData);
            observer.notify("SOME EVENT 3", messageData);

            expect(callCount).to.equal(3);

            function handler(eventName, data){
            	expect(data).to.equal(messageData);
            	++callCount;
            }
        });

        it("try to notify after unsubscribe", function () {
        	var callCount = 0;
        	var messageData = {};
            var observer = new Observer;

            observer.subscribe("SOME EVENT", handler);

            observer.unsubscribe("SOME EVENT", handler);

            observer.notify("SOME EVENT", messageData);

            expect(callCount).to.equal(0);

            function handler(eventName, data){
            	++callCount;
            }
        });
    });
});
